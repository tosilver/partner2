<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.b4pay.admin.common.system.dao.OrganizationDao">

    <sql id="Base_Column_List">
        a.id,
        a.name,
        a.parent_id as "parentId",
        a.parent_ids as "parentIds",
        a.available,
        a.remark,
        a.create_time as "createTime",
        a.update_time as "updateTime",
        a.status
    </sql>

    <select id="get" resultType="co.b4pay.admin.common.system.entity.Organization">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_organization a
        WHERE a.id = #{id}
    </select>

    <select id="findList" resultType="co.b4pay.admin.common.system.entity.Organization">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_organization a
        <where>
            a.status = 0
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_time DESC
            </otherwise>
        </choose>
    </select>

    <select id="findAllWithExclude" resultType="co.b4pay.admin.common.system.entity.Organization">
        SELECT
        <include refid="Base_Column_List"/>
        FROM sys_organization a
        <where>
            a.status = 0
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_time DESC
            </otherwise>
        </choose>
    </select>

    <insert id="insert">
        insert into sys_organization (name, parent_id, parent_ids, create_by, create_time, remark)
        values (#{name}, #{parentId}, #{parentIds}, #{createBy}, now(), #{remark})
    </insert>

    <update id="update">
        update sys_organization
        set name = #{name},
        parent_id = #{parentId},
        parent_ids = #{parentIds},
        update_by = #{updateBy},
        update_time = now(),
        remark = #{remark},
        available = #{available}
        where id = #{id}
    </update>

    <delete id="delete">
        delete
        from sys_organization
        where id = #{id}
    </delete>

    <!-- 移动节点 -->
    <update id="move1">
        update sys_organization
        set parent_id = #{targetId},
        parent_ids = #{targetGetParentIds}
        where id = #{sourceId}
    </update>
    <update id="move2">
        update sys_organization
        set parent_ids = concat(#{targetMakeSelfAsParentIds},
        substring(parent_ids, length(#{sourceMakeSelfAsParentIds})))
        where parent_ids like #{sourceId}
    </update>

</mapper>